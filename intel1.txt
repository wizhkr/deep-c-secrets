#include <stdio.h>
#include <stdlib.h>
#define T 20
int isPrime (long int x) {
    long int i;
    if (x == 1) return 0;
    for (i = 2; i < x; ++i)
        if (x%i == 0)
        return 0;
    return 1;
}

void process (long int n) {
    long int i,j,p,c,tmp;
    p = 0;
    c = 0;
    long int one,two,three,diff;
    long long int lessSum,middleSum, greatSum, ans;
    ans = 0;
    long int now,next;
    
    long int size = n * sizeof(long int);
    long int * parr = (long int *) malloc(size);
    long int * carr = (long int *) malloc(size);
   
    //find all primes and composites
    for (i = 1; i <= n; ++i) {
        if (isPrime(i))
            parr[p++] = i;
        else
            carr[c++] = i;
    }
  
   lessSum = 1;
    one = 1;
    
   middleSum = 0;
    
    for (i = 1,greatSum = 0; i < c; ++i) 
        greatSum += carr[i];
    greatSum -= (c - 1) * 2; 
   three = c - 1;
     now = parr[0];
       next = parr[1];
       diff = next - now;
        two = diff -1;
    for(i = 0; i < p; ++i) {
      
        
        ans += lessSum + greatSum;
        tmp =next - now;
       middleSum = tmp * (tmp - 1)/2;        
            
        
        
        
       lessSum = (lessSum +  diff  * one) + middleSum;
       greatSum = (greatSum - middleSum) - diff * three;
        one = one + two;
        now = parr[i+ 1];
       next = parr[i + 2];
       diff = next - now;
        two = diff -1;
        three = three - two;
        
            
        } //for ends
        
   printf ("%Ld\n", ans);
    } //process ends
    
    
   
int main () {
    long int a[T];
    int in,i;
   
    scanf("%d", &in);
    
    for ( i = 0; i < in; ++i)
        scanf("%ld", a+i);
    i = 0;
 while (in--) {
    process(a[i++]);
     }
    return 0;
}